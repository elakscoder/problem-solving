/* Brute Force Approach O(3N) O(N)

#include<bits/stdc++.h>
vector < int > sortedArray(vector < int > a, vector < int > b) 
{
    set<int>st;
    
    for(int i=0;i<a.size();i++)
    {
        st.insert(a[i]);
    }
    for(int i=0;i<b.size();i++)
    {
        st.insert(b[i]);
    }
    vector<int> temp;
   for(auto i:st)
   {
       temp.push_back(i);
   }
    return temp;
    // Write your code here
}
*/
/*OPTIMIZED APPROACH

#include<bits/stdc++.h>
vector < int > sortedArray(vector < int > a, vector < int > b) 
{
    int i=0;int n=a.size();
    int j=0;int m=b.size();
    vector<int> ans;
    while(i<n&&j<m)
    {
        if(a[i]<=b[j])
        {
            if(ans.size()==0||ans.back()!=a[i])
            {
                ans.push_back(a[i]);
               
            }
             i++;
        }else
        {
            if(ans.size()==0||ans.back()!=b[j])
            {
                ans.push_back(b[j]);
                
            }
            j++;
            
        }

    }
    while(j<m)
    {
        if(ans.size()==0||ans.back()!=b[j])
        {
            ans.push_back(b[j]);
            
        }
        j++;
    }
     while(i<n)
    {
        if(ans.size()==0||ans.back()!=a[i])
        {
            ans.push_back(a[i]);
            
        }
        i++;
    }
    return ans;
    // Write your code here
}

*/